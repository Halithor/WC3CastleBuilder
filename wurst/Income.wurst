package Income

import Constants
import ClosureEvents
import ClosureTimers
import HashSet
import PlayerStatus

constant CITIZEN_GROWTH_AMOUNT = 0.75
constant CITIZEN_GROWTH_TIME = 15.0

constant INCOME_PER_CITIZEN_PER_MINUTE = 0.5
constant INCOME_CYCLE_DURATION = 1.0
constant INCOME_BASE_PER_MINUTE = 100.0
constant INCOME_TECH_PER_MINUTE = 50.0

constant HOUSE_LIMIT = 20

constant kUID_TENT = 'h003'
constant kUID_HUT = 'h004'
constant kUID_HOUSE = 'h005'

constant kUID_TOWN = 'e002'
constant kUID_KINGDOM = 'e003'

function isUnitHouse(unit u) returns bool
    return u.getTypeId() == kUID_TENT 
        or u.getTypeId() == kUID_HUT 
        or u.getTypeId() == kUID_HOUSE

PlayerIncome array incomes

// HashMap<unit, int> upgradingIds = new HashMap<unit, int>()
HashSet<unit> upgradingHouses = new HashSet<unit>()

class PlayerIncome
    player owner

    // only constructed, non-upgrading houses
    group houses

    int tentCount = 0
    int hutCount = 0
    int houseCount = 0

    real goldOverflow = 0.0
    real citizens = 0

    int techLevel = 1

    construct(player p)
        owner = p
        houses = CreateGroup()
        SetPlayerTechMaxAllowed(owner, kUID_TENT, 20)

    /** Get the total count of all income producing structures, include those under construction. */
    function getTotalIncomeStructures() returns int
        return tentCount + hutCount + houseCount

    function giveIncome()
        let income = ((((INCOME_BASE_PER_MINUTE + (techLevel - 1) * INCOME_TECH_PER_MINUTE)
            + (citizens * INCOME_PER_CITIZEN_PER_MINUTE)) / 60.0) * INCOME_CYCLE_DURATION) 
            + goldOverflow
        let goldGained = income.floor()
        goldOverflow = (income - goldGained)
        owner.addGold(goldGained)

    function updateCitizens()
        citizens = 0
        for house in houses
            if not upgradingHouses.has(house)
                // only update the non-upgrading houses
                var occupants = house.getMana() + CITIZEN_GROWTH_AMOUNT
                if occupants > house.getMaxMana()
                    occupants = house.getMaxMana()
                house.setMana(occupants)
            citizens += house.getMana()
        
    function sendReport()
        owner.print("|cffffcc00===== Kingdom Report ====|r", 10)
        owner.print("|cff411fffCitizens|r: " + citizens.toInt().toString(), 10)
        owner.print("|cff411fffKingdom|r: " 
            + (INCOME_BASE_PER_MINUTE + (techLevel - 1) * INCOME_TECH_PER_MINUTE).toString(0), 10)
        owner.print("|cff411fffIncome per minute|r: " 
            + ((INCOME_BASE_PER_MINUTE + (techLevel - 1) * INCOME_TECH_PER_MINUTE) 
            + (citizens * INCOME_PER_CITIZEN_PER_MINUTE)).toInt().toString(), 10)
        

    function updateHouseLimits()
        let total = getTotalIncomeStructures()
        // Just limit the tents, as they need to be built to do anything else
        SetPlayerTechMaxAllowed(owner, kUID_TENT, tentCount + (HOUSE_LIMIT - total))

    function handleHouseConstructStart(unit u)
        if u.getTypeId() == kUID_TENT
            tentCount += 1
        else if u.getTypeId() == kUID_HUT
            hutCount += 1
        else if u.getTypeId() == kUID_HOUSE
            houseCount += 1
        updateHouseLimits()

    function handleHouseConstructFinish(unit u)
        houses.addUnit(u)
    
    function handleHouseConstructCancel(unit u)
        if u.getTypeId() == kUID_TENT
            tentCount -= 1
        else if u.getTypeId() == kUID_HUT
            hutCount -= 1
        else if u.getTypeId() == kUID_HOUSE
            houseCount -= 1
        updateHouseLimits()

    // House could be upgrading or normal.
    function handleHouseDeath(unit u)
        if upgradingHouses.has(u)
            // Upgrading. Change the count changes, remove from group
            if u.getTypeId() == kUID_HUT
                // remove from one tier lower, as the ID will be the type being upgraded to.
                tentCount -= 1
            else if u.getTypeId() == kUID_HOUSE
                hutCount -= 1
            upgradingHouses.remove(u)
        else 
            // Not upgrading, handle as usual
            if u.getTypeId() == kUID_TENT
                tentCount -= 1
            else if u.getTypeId() == kUID_HUT
                hutCount -= 1
            else if u.getTypeId() == kUID_HOUSE
                houseCount -= 1
        // remove from normal group and update limits
        houses.removeUnit(u)
        updateHouseLimits()
        updateCitizens()

    function handleHouseUpgradeStart(unit u)
        upgradingHouses.add(u)
        u.setMana(u.getMana() / 2.0)
        if u.getTypeId() == kUID_HUT
            hutCount += 1
            tentCount -= 1
        else if u.getTypeId() == kUID_HOUSE
            houseCount += 1
            hutCount -= 1
        updateHouseLimits()
    
    function handleHouseUpgradeFinish(unit u)
        upgradingHouses.remove(u)

    function handleHouseUpgradeCancel(unit u)
        upgradingHouses.remove(u)
        u.setMana(u.getMana() * 2.0)
        if u.getTypeId() == kUID_TENT
            tentCount += 1
            hutCount -= 1
        else if u.getTypeId() == kUID_HUT
            hutCount += 1
            houseCount -= 1
        updateHouseLimits()

function player.getIncome() returns PlayerIncome
    return incomes[this.getId()]

init
    for i = 0 to MAX_PLAYERS
        incomes[i] = new PlayerIncome(players[i])

    // Citizen growth
    doPeriodically(CITIZEN_GROWTH_TIME) cb -> 
        for i = 0 to MAX_PLAYERS
            players[i].getIncome().updateCitizens()

    // Income
    let tax = CreateTimer()
    tax.doPeriodically(INCOME_CYCLE_DURATION) cb -> 
        for i = 0 to MAX_PLAYERS
            players[i].getIncome().giveIncome()

    // Print Kingdom report
    doPeriodically(60.0) cb ->
        for i = 0 to MAX_PLAYERS
            players[i].getIncome().sendReport()
    
    if INCOME_CYCLE_DURATION >= 5.0
        doAfter(0.05) ->
            tax.createTimerDialog()
                ..setTitle("|cffffcc00Income|r")
                ..display(true)
    
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_START) ->
        let u = GetConstructingStructure()
        if isUnitHouse(u)
            u.getOwner().getIncome()
                    .handleHouseConstructStart(u)
    // Construct cancel NOT NEEDED as it is handled in the "death"
    // registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL) ->
    //     let u = GetCancelledStructure()
    //     if isUnitHouse(u)
    //         u.getOwner().getIncome()
    //                 .handleHouseConstructCancel(u)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH) ->
        let u = GetConstructedStructure()
        if isUnitHouse(u)
            u.getOwner().getIncome()
                    .handleHouseConstructFinish(u)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        let u = GetDyingUnit()
        if isUnitHouse(u)
            u.getOwner().getIncome()
                    .handleHouseDeath(u)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_START) ->
        let u = GetTriggerUnit()
        if isUnitHouse(u)
            u.getOwner().getIncome()
                    .handleHouseUpgradeStart(u)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
        let u = GetTriggerUnit()
        if isUnitHouse(u)
            u.getOwner().getIncome()
                    .handleHouseUpgradeFinish(u)
        else if u.getTypeId() == kUID_TOWN or u.getTypeId() == kUID_KINGDOM
            u.getOwner().getIncome().techLevel += 1
            print(u.getOwner().getNameColoredNoNumber() 
                + " has upgraded to a |cffffcc00" + u.getName() + "|r")
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_CANCEL) ->
        let u = GetTriggerUnit()
        if isUnitHouse(u)
            u.getOwner().getIncome()
                    .handleHouseUpgradeCancel(u)
    EventListener.add(EVENT_PLAYER_CHAT_FILTER) ->
        if GetEventPlayerChatString().trim().startsWith("-report")
            GetTriggerPlayer().getIncome().sendReport()
